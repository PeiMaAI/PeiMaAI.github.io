---
title: "LLM for table data enhancement-CN"
layout: post
date: 2024-08-15 11::31
headerImage: false  
category: blog 
author: Pei Ma
---

随着大型语言模型（LLM）在自然语言处理（NLP）领域的广泛应用，它们在各种任务中展现了显著的能力，包括文本生成、问答系统和情感分析。然而，尽管LLM在处理非结构化数据方面表现优异，它们在处理结构化数据，特别是表格数据时，仍面临诸多挑战。表格数据的结构化特性和丰富的语义信息对LLM提出了更高的要求，传统的文本处理方法往往无法直接适用于此类数据。

本文旨在总结和讨论处理表格数据的关键技术和方法。我们深入分析了LLM在处理表格数据时重要的文献和方法，这些研究尝试解决LLM在处理表格数据时遇到的难题，包括表格数据的编码、查询和生成等方面。通过对ColBERT、ColBERTv2、DPR以及RAFT等技术的详细探讨，我们展示了当前LLM在表格数据处理领域的主要进展和创新。这些技术不仅提升了表格数据的理解和检索能力，也为未来的研究提供了重要的参考。
## LLM for Table

[Large Language Model for Table Processing](https://arxiv.org/pdf/2402.05121)

### 1. LLMs表格处理方法分类

在处理表格数据时，研究主要集中在训练和提示这两大方法上，具体包括：

1. **基于训练的方法**：
    - **任务特定微调**：例如TaPas和TaBERT，通过调整模型结构和训练目标来提升表格任务的性能。
    - **指令微调**：如TableLlama和Table-GPT，通过在多个数据集上的微调，改进模型在未见任务上的表现。
    - **检索增强方法**：如ITR和LI-RAGE，将大型表格分割成子表，并联合训练检索器和阅读器。

2. **基于提示的方法**：
    - **表格序列化**：将表格转换为线性文本格式，使LLMs更容易处理。
    - **少样本学习的示例选择**：挑选与目标任务最相关的示例，以提高模型性能。

3. **基于代理的方法**：
    - **复杂任务分解**：例如DIN-SQL，通过将复杂任务分解为更小的子任务来提升准确性。
    - **动作定义**：将软件工具的API抽象为动作，方便LLMs调用。
    - **反思和修正**：通过生成多个推理路径并选择最一致的答案，或通过自我修正来提高模型的准确性。
    - **多任务框架**：例如StructGPT，能够处理多种表格任务。

### 具体方法归纳

1. **任务特定微调**：
    - **TaPas**：扩展BERT模型结构，进行表格预训练和微调。
    - **TaBERT**：编码与输入语句相关的表格内容，并使用垂直注意力机制。
    - **TURL**：将表格组件的信息编码为单独的输入嵌入，并将其融合在一起。

2. **指令微调**：
    - **Table-GPT**：使用合成-增强的方法构建指令微调数据集。
    - **TableLlama**：利用现有数据集的真实数据进行指令微调。
    - **Magicoder**：收集开源代码片段，生成编程问题和解决方案进行指令微调。

3. **检索增强方法**：
    - **ITR**：将大型表格分割成子表，并联合训练检索器和阅读器。
    - **DB-GPT**：支持多种功能，如检索增强生成、微调和代理。

4. **表格序列化**：
    - 将表格内容线性化，插入列分隔符。
    - 表格模式可以用普通文本或CREATE TABLE语句表示。

5. **少样本学习的示例选择**：
    - 选择与目标任务最相关的示例，平衡质量和数量。

6. **复杂任务分解**：
    - **DIN-SQL**：将text-to-SQL任务分解为子任务，生成中间子查询。

7. **动作定义**：
    - **SheetCopilot**：将现有电子表格软件API建模为原子动作，通过嵌入和聚类方法设计。
    - **ReAcTable**：扩展ReAct框架，定义三种动作：生成SQL查询、生成Python代码和直接回答问题。

8. **反思和修正**：
    - 生成多个推理路径并选择最一致的答案。
    - 采用提案和修正机制，反思并改进过去的动作。

9. **多任务框架**：
    - **StructGPT**：通过开发针对网页表格、数据库和知识图谱的三种动作，解决多种表格任务。

这篇综述系统地总结了LLMs在表格处理任务中的最新进展和具体方法，并为未来的研究和应用提供了参考。

## LLM on Tabular Data (Retriever)

[Large Language Models (LLMs) on Tabular Data: Prediction, Generation, and Understanding](https://arxiv.org/pdf/2402.17944)

### 5.2 大型语言模型在问答任务中的普遍能力

表8列出了研究大型语言模型（LLMs）在问答和推理任务中的效果的论文及所探讨的模型。虽然GPT-3.5和GPT-4是最受欢迎的LLM，但这些模型并未特别优化用于表格任务。然而，结合一些提示工程（prompt engineering）技巧（如Chain of Thought，CoT），它们在执行复杂的表格推理任务时表现出色。

### 数值问答（Numerical QA）

数值问答任务涉及数学推理，例如，“美国运通的每笔交易的平均支付量是多少？”在许多实际应用中，如处理财务文件和年报，这种数学推理任务非常常见。Akhtar等（2023）发现，FlanT5和GPT-3.5在各种数值推理任务中表现优于其他模型。在DOCMATH-EVAL（Zhao等，2023d）数据集上，使用CoT的GPT-4显著优于其他LLM，而开源LLM（如LLaMa-2、Vicuna、Mistral、Starcoder、MPT、Qwen、AquilaChat2等）则表现较差。

### Text2SQL

Liu等（2023c）设计了一个问题匹配器，识别三种关键词类型：1）列名相关术语，2）限制相关短语（如“前十名”），3）算法或模块关键词。一旦识别了这些关键词，该模块将与每列相关的具体限制合并成统一的组合，然后将其与第三种关键词所指示的SQL算法或模块匹配。Zhang等（2023d）选择了一种更直接的方法，即让LLaMa-2基于问题和表模式生成SQL语句。Sun等（2023b）在Text2SQL任务上对PaLM-2进行了微调，在Spider数据集上取得了显著成绩。OpenTab（Kong等，2024）开发了一个基于LLM的开放域表格问答框架，结合了一个SQL生成模块。今天在Spider上的顶级模型包括Dong等（2023）、Gao等（2024）和Pourreza & Rafiei（2023），他们都建立在OpenAI的GPT模型之上。SQL生成在业界很受欢迎，许多开源微调模型也可用。

### 模型大小对性能的影响

Chen（2023）发现模型大小确实重要：在WebTableQuestions上，比较6.7B和175B的GPT-3模型时，较小的模型仅达到了较大模型得分的一半。在TabFact上，他们发现较小的模型（<=6.7B）的准确性几乎是随机的。

### 微调还是不微调？

一些较大的模型在各种表格任务（包括问答和事实验证任务）上进行了微调。Li等（2023d）发现，微调总是有助于提高各种表格任务的性能，尤其是在零样本设置中改进最为显著。Ye等（2023b）使用PASTA（Gu等，2022）模型在TabFact上得分更高（93.00%），相比之下，GPT-3 Codex（code-davinci-002）得分为85.60%。PASTA在一个由维基百科表格组成的120万条目合成语料库上进行了预训练，用于六种类型的句子-表格填空任务。这表明在使用微调的LLM在表格任务上仍有一些好处。

然而，与在预测和生成任务上工作的其他方法相比，微调并不常见。这可能是因为LLMs（如GPT-3.5，GPT-4）在开箱即用的问答任务中表现良好。在Spider上的SQL生成中，DIN-SQL（Pourreza & Rafiei，2023）和DAIL-SQL（Gao等，2024）是使用GPT-4的推理技术，超越了以前微调的较小模型。有趣的是，在Gao等（2024）的论文中，作者在Text2SQL任务上微调了一个Llama 2 13B模型，但该模型并没有超过未微调的GPT-4模型。相反，许多使用LLM进行表格理解任务的论文专注于调整序列化、提示工程、搜索和检索以及端到端管道（用户界面）等方面的内容，我们将在下一部分进一步描述。

### 5.3 表格问答的关键组成部分

在最简单的问答架构中，一个LLM接收一个输入提示（查询和序列化表格），并返回一个答案。在更复杂的架构中，系统可能连接到外部数据库或程序。大多数情况下，知识库可能无法适应LLM的上下文长度或内存。因此，LLM在表格问答

中的独特挑战包括：查询意图的消歧、搜索和检索、输出类型和格式，以及需要程序之间迭代调用的多轮设置。在本节中，我们将进一步描述这些组件。

### 5.3.1 查询意图消歧

Zha等（2023）引入了命令链（Chain-of-command，CoC）的概念，将用户输入转换为一系列中间命令操作。例如，一个LLM需要首先检查任务是否需要检索、数学推理、表格操作，以及如果指令太模糊无法回答问题。他们构建了一个命令链指令数据集，以微调LLMs生成这些命令。Deng等（2022b）建议将问答任务分为三个子任务：澄清需求预测（CNP）以确定是否需要提出澄清不确定性的问；澄清问题生成（CQG），如果CNP检测到需要澄清，则生成一个澄清问题作为响应；以及对话问答（CQA），如果不需要澄清，则直接生成答案作为响应。他们训练了一个UniPCQA模型，通过多任务学习统一了问答中的所有子任务。

---

### 搜索和检索方法归纳总结

### 1. 检索模块性能提升

- **Retriever Module**: 返回最相关的前n个文档，性能越好，最终准确性越高（Zhao et al., 2023d）。[论文链接](https://arxiv.org/pdf/2311.09805)

### 2. 表格采样方法

[TAP4LLM: Table Provider on Sampling, Augmenting, and Packing Semi-structured Data for Large Language Model Reasoning](https://arxiv.org/abs/2312.09039)

- **多种采样方法**: 包括行和列的采样以及表格打包方法（Sui et al., 2023c）。
    - **基于查询的采样**: 检索与问题语义相似度最高的行，效果最好。
    - **无采样、聚类、随机、均匀采样、内容快照方法**: 相对较弱。

### 3. 表格排名方法

[C3: Zero-shot Text-to-SQL with ChatGPT](https://arxiv.org/abs/2307.07306)

- **ChatGPT 排名表格**: 生成十组检索结果，每组包含前四个表格，然后选择出现最频繁的一组（Dong et al., 2023）。
- **列排名**: 根据与问题的相关性对所有列进行排名，匹配列名与问题词，或优先处理外键以帮助更准确的召回（Dong et al., 2023）。

### 4. 三步检索架构

- **Dense Table Retrieval (DTR)**: 基于RoBERTa的双编码器模型，识别与查询最相关的表格（Sundar & Heck, 2023）。
[cTBLS: Augmenting Large Language Models with Conversational Tables](https://aclanthology.org/2023.nlp4convai-1.6.pdf)
- **Coarse System State Tracking**: 使用三元组损失训练，对单元格进行排名（Sundar & Heck, 2023）。
- **自然语言响应生成**: 基于GPT-3.5，结合对话历史、排名的知识来源和查询生成响应（Sundar & Heck, 2023）。

### 5. 稠密和稀疏检索器结合

- **Ada Embedding4 和 Contriever**: 作为稠密检索器（Zhao et al., 2023d）。
- **BM25**: 作为稀疏检索器（Zhao et al., 2023d）。
- **综合使用**: 提取最相关的文本和表格证据。

### 6. 获取额外信息的方法

[Text-to-SQL Empowered by Large Language Models: A Benchmark Evaluation](https://www.vldb.org/pvldb/vol17/p1132-gao.pdf)

Code: [Text-to-SQL Empowered by Large Language Models: A Benchmark Evaluation](https://github.com/BeachWang/DAIL-SQL)

- **策划样本用于上下文学习**（Gao et al., 2024）
    - **随机选择**: 随机选择k个示例。
    - **问题相似度选择**: 基于与问题Q的语义相似度选择k个示例。
    - **掩蔽问题相似度选择**: 掩蔽问题中的领域特定信息后进行相似度选择。
    - **查询相似度选择**: 选择与目标SQL查询s*相似的k个示例，使用另一个模型生成近似SQL查询s'。

### 7. 手动和随机示例选择

- **手动策划和随机选择**（Narayan et al., 2022）


## LI-RAGE

[LI-RAGE: L ate I nteraction R etrieval A ugmented Generation with Explicit Signals for Open-Domain Table Question Answering](https://aclanthology.org/2023.acl-short.133.pdf)

### 文章内容简短总结

LI-RAGE框架是一种针对开放领域表格问答（TableQA）的新方法。该方法通过结合后期交互检索（Late Interaction，LI）模型和显式信号的检索增强生成（RAGE）损失，显著提升了表格问答的性能。与传统的检索-阅读器（Retriever-Reader）管道相比，LI-RAGE通过以下改进提供了更高的准确性和可靠性：

1. **后期交互模型（LI）**：使用ColBERT模型对问题和表格进行逐词编码，捕捉更细粒度的交互信息，从而提升表格检索效果。
2. **联合训练（RAGE损失）**：将检索器和阅读器的信号结合进行联合训练，优化表格检索与答案生成的效果。
3. **二进制相关性标记**：在生成答案前添加二进制相关性标记（yes/no），以指示表格是否与问题相关，从而提高答案的可靠性。

### 示例问题

考虑到问题“哪个国家的人口最多？”

### 表格数据集

假设有如下表格数据：

表格1：

| 国家 | 人口 |
| --- | --- |
| 中国 | 1,411百万 |
| 印度 | 1,366百万 |
| 美国 | 331百万 |

表格2：

| 国家 | 面积 |
| --- | --- |
| 俄罗斯 | 17百万 km² |
| 加拿大 | 9.98百万 km² |
| 中国 | 9.6百万 km² |

表格3：

| 城市 | 人口 |
| --- | --- |
| 纽约 | 8百万 |
| 东京 | 14百万 |
| 上海 | 24百万 |

### 全流程示例

#### 1. 表格检索（Retriever）

检索器从表格语料库中选择与问题最相关的表格。在此示例中，检索器可能会选择表格1，因为它包含了国家与人口的相关信息。

**检索结果：**  
选择表格1：

| 国家 | 人口 |
| --- | --- |
| 中国 | 1,411百万 |
| 印度 | 1,366百万 |
| 美国 | 331百万 |

#### 2. 答案生成（Reader）

答案生成器模型将问题和检索到的表格作为输入，并生成答案。在此例中，答案生成器将问题“哪个国家的人口最多？”与表格1结合，通过识别关键词“国家”和“人口最多”，在表格中查找最大值对应的国家，生成答案：“中国”。

#### 3. 二进制相关性标记（Binary Relevance Token）

为确保答案生成器选择的表格是可靠的，在生成答案前添加二进制相关性标记。在训练过程中，系统学习到从黄金表格生成的答案前有“yes”，而从非黄金表格生成的答案前有“no”。此例中，生成的答案是从黄金表格（表格1）中得出的，因此答案前有“yes”。

**最终输出：**  
答案生成器输出：“yes 中国”。

#### 4. 过滤与确定最终答案

在推理阶段，如果答案生成器输出的前缀为“yes”，则表明该答案可靠。系统将优先选择标记为“yes”的答案；如果所有候选答案的前缀均为“no”，系统将依据答案生成器的置信度得分来选择最终答案。在此例中，系统识别到“yes”标记，确认该答案可靠，最终输出答案：“中国”。

### 总结

上述流程展示了开放领域表格问答系统从输入问题到生成最终答案的完整过程。通过LI-RAGE框架，系统不仅能够从大量表格数据中有效检索相关信息，还能通过二进制相关性标记确保答案的可靠性。

## TAP4LLM

[TAP4LLM: Table Provider on Sampling, Augmenting, and Packing Semi-structured Data for Large Language Model Reasoning](https://arxiv.org/pdf/2312.09039)

### TAP4LLM方法详细总结

### 大型语言模型在表格数据中的应用

随着自然语言处理领域大型语言模型（LLMs）的进展，研究者开始探索将这些模型应用于其他模态，如视觉和语音。然而，直接在表格领域使用传统LLMs面临两个主要挑战：

1. **全局表理解**：LLMs如GPT存在令牌长度限制，难以读取并理解整个大表格，从而限制了其对表格全局信息的理解。
2. **对表格领域的泛化**：这些模型的训练过程主要针对自然语言，因此在处理表格数据时泛化能力较弱。

尽管一些研究已经尝试将自然语言处理与表格数据分析相结合，LLMs在表格问答中的表现仍然受限。

### 表格增强技术

表格增强技术旨在提高机器学习模型的泛化性能和鲁棒性。为了提升LLMs在表格领域的表现，研究者进行了多种增强方法的探索，包括结构化知识、常识知识和分析性知识的结合。研究表明，利用领域特定的元数据或知识图能够显著提高LLMs对表格数据的理解能力。例如:
- **Jena et al. (2022)** 提出了半自动地转换现有表格数据，创建多样化的自然语言推理实例，以提高零样本性能。
- **He et al. (2023)** 提出了一个多任务元数据模型，利用字段分布和知识图信息，准确推断表格的分析元数据，并展示了其在智能数据分析产品中的应用。

### TAP4LLM的核心组件

TAP4LLM通过以下三个核心组件解决了综合表格理解中的主要挑战：

1. **表格采样**：从表格中选择和提取与查询最相关的行和列。
    - **基于规则的采样**：通过预定义标准或规则，如随机采样、均匀采样和内容快照采样，进行表格采样。
    - **基于嵌入的采样**：通过语义和上下文表示选择行和列，采用基于语义的采样、基于中心点的采样等方法。
    - **基于LLM的采样**：利用强大的LLM来预测表格行和列的索引，但这种方法计算成本较高。
2. **表格增强**：通过添加外部知识和元数据丰富表格信息。
    - **基于元数据的增强**：包括维度/度量、语义字段类型、表格大小、统计特征和标题层次结构等信息的添加。
    - **基于检索的增强**：通过文档检索系统，从外部知识库中获取相关内容以减少幻觉或事实性错误。
    - **基于自一致性的增强**：通过迭代生成和改进查询与响应，提高模型的推理能力。
3. **表格打包与序列化**：控制令牌分配，将表格和增强信息打包成适用于LLMs的序列。
    - 经验研究显示，子表长度与增强信息长度的比例在5:5和4:6之间时，通常带来最佳性能。
    - 支持多种序列化格式，如HTML、XML、JSON、CSV、NL+Sep和Markdown等。

### 结论

TAP4LLM通过表格采样、表格增强以及表格打包与序列化，解决了综合表格理解中的主要挑战，提升了LLMs在表格推理任务中的有效性。该方法不仅适用于表格建模，还能在金融、交通等领域中发挥重要作用，推动基于表格数据的研究。

### 限制

代码生成方法已被提出用于将自然语言查询转换为可执行代码或结构化表示（Cheng et al., 2023; Gemmell and Dalton, 2023）。这一研究方向具有重要性，但由于篇幅限制，本研究未深入探讨此主题。当前的实证研究主要集中在英语场景，对多语言能力的讨论也将留待未来研究中进行。

### 示例：使用TAP4LLM进行表格数据分析

假设存在一个包含某公司过去几年季度财务报告的金融数据表格。表格列包括年份、季度、收入、支出、净利润和资产负债率。目标是通过自然语言查询“该公司在过去五年中的季度净利润趋势如何？”来生成准确的分析。

### 1. 表格采样

**初始表格（T）**：

| 年份 | 季度 | 收入 | 支出 | 净利润 | 资产负债率 |
| --- | --- | --- | --- | --- | --- |
| 2019 | Q1 | 1000 | 800 | 200 | 50% |
| 2019 | Q2 | 1100 | 850 | 250 | 48% |
| 2019 | Q3 | 1050 | 820 | 230 | 49% |
| 2019 | Q4 | 1200 | 900 | 300 | 47% |
| 2020 | Q1 | 1300 | 950 | 350 | 46% |
| ...  | ...  | ...  | ...  | ...  | ...  |
| 2023 | Q4 | 1600 | 1200 | 400 | 45% |

为回答“该公司在过去五年中的季度净利润趋势如何？”这一查询，需要对表格进行采样。

**表格采样步骤**：

- **基于规则的采样**：选择最近五年的数据（2019-2023）。
- **基于嵌入的采样**：使用语义采样，选择与“净利润”相关的行和列。

**采样后的子表（T'）**：

| 年份 | 季度 | 净利润 |
| --- | --- | --- |
| 2019 | Q1 | 200 |
| 2019 | Q2 | 250 |
| 2019 | Q3 | 230 |
| 2019 | Q4 | 300 |
| 2020 | Q1 | 350 |
| ...  | ...  | ...  |
| 2023 | Q4 | 400 |

### 2. 表格增强

**元数据增强**：

- **维度/度量**：添加“净利润”作为度量值。
- **统计特征**：计算各季度的平均净利润、最大值和最小值。

**检索增强**：

- **文档参考**：从外部数据库检索相关的行业分析报告，解释财务术语如“净利润”的定义及其影响因素。
- **术语解释**：提供“资产负债率”的解释，并说明其与净利润的关系。

**自一致性增强**：

- 使用自提示方法生成初步分析结果，并将这些结果重新输入模型以进一步提高准确性。

### 3. 表格打包与序列化

**序列化格式**：选择JSON格式进行打包。

**打包后的序列**：

```json
{
  "query": "该公司在过去五年中的季度净利润趋势如何？",
  "table": [
    {"年份": 2019, "季度": "Q1", "净利润": 200},
    {"年份": 2019, "季度": "Q2", "净利润": 250},
    {"年份": 2019, "季度": "Q3", "净利润": 230},
    {"年份": 2019, "季度": "Q4", "净利润": 300},
    {"年份": 2020, "季度": "Q1", "净利润": 350},
    {"年份": 2023, "季度": "Q4", "净利润": 400}
  ],
  "metadata": {
    "度量值": "净利润",
    "统计特征": {
      "平均净利润": 275,
      "最大净利润": 400,
      "最小净利润": 200
    }
  },
  "augmentation": {
    "文档参考": ["相关行业分析报告链接"],
    "术语解释": {
      "资产负债率": "资产负债率是衡量公司负债与资产比率的指标，反映公司财务健康状况。"
    }
  }
}
```

### 4. 最终分析结果

使用TAP4LLM预处理后的数据和增强信息，生成最终的分析报告：

**生成的分析报告**：

“根据该公司的财务数据，过去五年的季度净利润呈现逐步增长的趋势，从2019年Q1的200万增长到2023年Q4的400万。平均净利润为275万，最大值为400万，最小值为200万。此增长趋势反映了公司在财务管理和市场策略上的成功。此外，资产负债率从2019年的50%降低到2023年的45%，进一步显示了公司的财务健康状况。”

通过以上步骤，展示了如何利用TAP4LLM方法处理和分析表格数据，从而生成高质量的自然语言报告。

### 例子：使用TAP4LLM回答金融数据问题

假设有一个包含股票价格每日记录的金融数据表格，问题是关于特定时间段内某股票的平均价格。

### 1. 输入表格和问题

**表格T**:

| 日期 | 股票代码 | 开盘价 | 收盘价 | 最高价 | 最低价 | 成交量 |
| --- | --- | --- | --- | --- | --- | --- |
| 2024-01-01 | AAPL | 150 | 155 | 157 | 149 | 1000000 |
| 2024-01-02 | AAPL | 156 | 158 | 159 | 155 | 1200000 |
| 2024-01-03 | AAPL | 157 | 159 | 160 | 156 | 1100000 |
| ...  | ...  | ...  | ...  | ...  | ...  | ...  |
| 2024-01-01 | MSFT | 210 | 215 | 217 | 209 | 900000 |
| 2024-01-02 | MSFT | 216 | 218 | 219 | 215 | 950000 |
| 2024-01-03 | MSFT | 217 | 220 | 221 | 216 | 920000 |
| ...  | ...  | ...  | ...  | ...  | ...  | ...  |

**问题Q**:
"AAPL股票在2024年1月1日至2024年1月3日的平均收盘价是多少？"

### 2. 表格采样

根据问题Q，只需提取AAPL股票在指定日期范围内的相关数据。可以使用基于语义的采样方法，通过计算查询Q与表格每行的相似度，选出相关行。

**采样后的子表T'**:

| 日期 | 股票代码 | 开盘价 | 收盘价 | 最高价 | 最低价 | 成交量 |
| --- | --- | --- | --- | --- | --- | --- |
| 2024-01-01 | AAPL | 150 | 155 | 157 | 149 | 1000000 |
| 2024-01-02 | AAPL | 156 | 158 | 159 | 155 | 1200000 |
| 2024-01-03 | AAPL | 157 | 159 | 160 | 156 | 1100000 |

### 3. 表格增强

为帮助LLM更好地理解表格数据，可以引入一些增强信息，如股票的历史数据统计信息或相关术语解释。

**增强信息**:

- 维度/度量：股票代码为维度，收盘价为度量。
- 术语解释：解释“收盘价”是指股票在交易日结束时的价格。
- 历史统计信息：过去一年的平均收盘价、最高价、最低价等。

### 4. 表格打包与序列化

将采样后的表格和增强信息打包为一个序列，适用于LLM的输入。

**打包后的输入**:

```
问题: 请问AAPL股票在2024年1月1日至2024年1月3日的平均收盘价是多少？
表格:
| 日期       | 股票代码 | 收盘价 |
|------------|----------|--------|
| 2024-01-01 | AAPL     | 155    |
| 2024-01-02 | AAPL     | 158    |
| 2024-01-03 | AAPL     | 159    |

增强信息:
- 股票代码为维度，收盘价为度量。
- 收盘价是指股票在交易日结束时的价格。
- 过去

一年AAPL的平均收盘价为160，最高价为165，最低价为150。
```

### 5. 结果生成

使用LLM来计算平均值并生成答案。

**答案**:

"根据提供的数据，AAPL股票在2024年1月1日至2024年1月3日的平均收盘价为157.33。"

## [ColBERT](https://dl.acm.org/doi/pdf/10.1145/3397271.3401075)

### 创新点

1. **延迟交互框架**：[ColBERT](https://dl.acm.org/doi/pdf/10.1145/3397271.3401075)引入了一种延迟交互架构，通过将查询和文档的编码过程分离，并在查询和文档分别编码后再进行相似度计算。这使得可以预先计算文档的表示，减少了在线查询时的计算量。
2. **最大相似度操作（MaxSim）**：在评估查询和文档之间的相关性时，[ColBERT](https://dl.acm.org/doi/pdf/10.1145/3397271.3401075)采用了最大相似度操作（MaxSim），即每个查询嵌入与文档嵌入之间的最大余弦相似度或L2距离，并将这些最大相似度值求和。这种机制既简单又高效。
3. **BERT编码器共享**：[ColBERT](https://dl.acm.org/doi/pdf/10.1145/3397271.3401075)在查询和文档编码器之间共享一个BERT模型，但通过在查询和文档前分别加上特殊标记（[Q]和[D]）来区分输入。这种方法既节省了计算资源，又保持了模型的上下文理解能力。
4. **查询和文档的分段和过滤**：文档编码器在处理文档时，会过滤掉标点符号的嵌入，以减少计算量和存储空间。
5. **基于向量相似性的检索**：利用现有的向量相似性搜索库（如faiss），[ColBERT](https://dl.acm.org/doi/pdf/10.1145/3397271.3401075)可以通过高效的剪枝操作实现从大型文档集合中的端到端检索。

### 优点

1. **计算效率高**：通过预计算文档表示和使用延迟交互机制，ColBERT在处理查询时大大减少了计算量，相对于其他基于BERT的模型，其速度提高了两个数量级。
2. **高效的空间利用**：通过对文档嵌入进行归一化和降维处理，ColBERT显著减少了存储空间需求，使其能够在实际应用中更加可行。
3. **强大的扩展性**：ColBERT的架构设计使其能够在不牺牲精度的情况下处理大规模文档集合，特别是在使用向量相似性搜索进行剪枝时，其检索效率大大提高。
4. **端到端检索能力**：ColBERT不仅可以用于重新排序预检索的文档集，还可以直接从大型文档集合中进行端到端检索，提高了整体检索系统的召回率和精度。

### 解决的问题

1. **计算成本高**：传统基于BERT的排序模型在查询-文档对的计算上非常耗时，ColBERT通过引入延迟交互和预计算机制，大大降低了在线计算成本。
2. **响应时间长**：高计算成本导致的长查询响应时间对用户体验有负面影响。ColBERT通过更高效的计算和检索机制，显著减少了查询延迟。
3. **存储空间大**：深度语言模型通常需要大量存储空间来保存文档表示，ColBERT通过归一化和降维处理减少了存储需求。
4. **检索精度与效率的权衡**：现有方法在提高检索效率时往往牺牲精度，ColBERT通过高效的延迟交互和向量相似性搜索，在不降低精度的情况下提高了检索效率。

### ColBERT 使用流程示例：详细和生动的讲解

### 背景

假设你正在使用一个学术论文数据库，里面有数百万篇学术论文。你正在研究“机器学习的好处”，想找到最相关的论文。这就是ColBERT可以帮助你的地方。

### 1. 离线预处理和编码文档

在任何查询发生之前，我们先对数据库中的每一篇论文进行预处理和编码。这是一个离线过程，类似于图书馆对所有书籍进行分类和编号。

1. **分割文档**：将每篇论文分解成单词，比如“机器学习是一种数据分析的方法，可以自动构建分析模型”会被分解成“机器”、“学习”、“是”、“一种”、“数据”、“分析”……。
2. **添加标记**：在每篇论文的开头加上特殊标记，比如“[D]”，以表明这是一个文档。
3. **BERT编码**：使用BERT模型对每个单词进行编码，将它们转化为具有上下文意义的向量表示。这就像是为每个单词生成一个独特的数字签名。
4. **过滤无关信息**：去除标点符号等无关信息，保持重要的单词。
5. **归一化和降维**：对这些向量进行归一化处理，使它们的表示更加紧凑和高效，类似于将大文件压缩成小文件，便于存储和处理。
6. **存储嵌入**：将处理后的向量存储到数据库中，以备后续使用。

### 2. 查询预处理和编码

当你输入查询“机器学习的好处”时，ColBERT会立即对这个查询进行处理，这个过程是在线进行的。

1. **分割查询**：将查询分解成单词，比如“机器”、“学习”、“的”、“好处”。
2. **添加标记**：在查询前面加上特殊标记，比如“[Q]”，以表明这是一个查询。
3. **填充和BERT编码**：将查询填充到固定长度并输入BERT模型，生成每个单词的上下文向量。这些向量表示了查询中每个单词的意义和它们之间的关系。
4. **归一化和降维**：对这些向量进行归一化处理，使它们与文档向量的格式一致。

### 3. 延迟交互和相似度计算

接下来，ColBERT通过延迟交互和相似度计算来找到最相关的论文。

1. **加载文档嵌入**：从数据库中加载所有预先计算好的文档向量表示。
2. **最大相似度计算**：对于查询中的每个单词向量，找到与文档中所有单词向量之间的最大相似度。这就像是找到最匹配的拼图块。
3. **相似度求和**：将每个查询单词与文档单词的最大相似度值相加，得到一个总的相似度分数。这个分数表示了该文档与查询的相关性。

### 4. 文档排序和检索

最后，根据相似度分数对文档进行排序，并返回得分最高的前k个文档。

1. **文档排序**：将所有候选文档按相似度得分进行排序，类似于将考试成绩从高到低排序。
2. **返回结果**：返回得分最高的前k个文档，这些就是与你的查询最相关的论文。

### 生动形象的示例

想象你在图书馆里寻找“机器学习的好处”相关的书籍。图书馆员（ColBERT）事先已经对所有书籍进行了详细分类和标注（文档预处理和编码）。当你提出查询时，图书馆员快速浏览了每本书的内容（查询编码和相似度计算），找到了最相关的书籍并排列出来（文档排序和检索），最终将最相关的几本书递给你。这一切发生得非常迅速，因为图书馆员已经事先做好了大量准备工作。

通过这种方式，ColBERT既能保证高效处理大量数据，又能在查询时提供快速响应和高质量的结果。

[ColBERT: Efficient and Effective Passage Search via Contextualized Late Interaction over BERT](https://arxiv.org/abs/2004.12832)


## ColBERT v2

[ColBERTv2: Effective and Efficient Retrieval via Lightweight Late Interaction](https://arxiv.org/pdf/2112.01488)

### [ColBERTv2: Effective and Efficient Retrieval via Lightweight Late Interaction](https://arxiv.org/pdf/2112.01488)的主要改进和优化

1. **残差压缩机制**：这是[ColBERTv2: Effective and Efficient Retrieval via Lightweight Late Interaction](https://arxiv.org/pdf/2112.01488)的一个主要创新点。通过将每个嵌入向量编码为其最近质心的索引和量化残差，ColBERTv2大大减少了存储需求。这个改进在不牺牲模型质量的情况下显著降低了存储成本。
2. **降噪监督**：[ColBERTv2: Effective and Efficient Retrieval via Lightweight Late Interaction](https://arxiv.org/pdf/2112.01488)引入了一种新的监督策略，包括交叉编码器蒸馏和困难负样本挖掘。这种方法选择具有挑战性的负样本，避免奖励假阳性或惩罚假阴性，从而提高了训练效果和模型质量。
3. **高效索引和检索**：
    - **质心选择**：在索引阶段，[ColBERTv2: Effective and Efficient Retrieval via Lightweight Late Interaction](https://arxiv.org/pdf/2112.01488)通过质心选择优化了段落的表示。
    - **段落编码**：通过调用BERT编码器并压缩输出嵌入，将每个嵌入分配到最近的质心并计算量化残差。
    - **索引倒置**：为了支持快速最近邻搜索，[ColBERTv2: Effective and Efficient Retrieval via Lightweight Late Interaction](https://arxiv.org/pdf/2112.01488)将对应于每个质心的嵌入ID分组并保存倒排列表，这样在检索时可以快速找到相似的标记级嵌入。
4. **检索过程优化**：
    - **候选生成**：对于查询中的每个向量，找到最近的质心，并使用倒排列表识别接近这些质心的段落嵌入，解压缩它们，并计算它们与查询向量的余弦相似度。
    - **评分和排序**：将分数按段落ID分组，并对同一段落的分数进行最大化减少，最终进行排序并返回结果。

### [ColBERTv2: Effective and Efficient Retrieval via Lightweight Late Interaction](https://arxiv.org/pdf/2112.01488) 的全流程示例

### 背景

假设我们有一个学术论文数据库，包含数百万篇论文。您是一名研究者，正在研究“机器学习的好处”，并希望找到最相关的论文。

### 1. 离线预处理和编码文档

**步骤1：质心选择**

1. **采样**：从数百万篇论文中随机抽取一个样本，大小为语料库规模的平方根。
2. **聚类**：对采样的论文片段进行k-means聚类，生成一组质心C。这些质心用于支持后续的残差编码和最近邻搜索。

**步骤2：段落编码**

1. **BERT编码**：对于每篇论文，用BERT模型对其每个单词进行编码，生成一个嵌入向量。例如，一篇论文的片段“Machine learning is a method of data analysis”会被编码成多个嵌入向量。
2. **残差计算**：对于每个嵌入向量，找到其最近的质心Ct，并计算量化残差r = v - Ct。
3. **存储**：将质心索引和量化残差一起存储到磁盘上。例如，段落中的一个嵌入向量可能被表示为最近质心的索引和一个小的量化残差。

**步骤3：索引倒置**

1. **倒排列表**：将所有质心的索引分组，并保存倒排列表，以支持快速的最近邻搜索。这类似于将书籍按分类编号存放在书架上，以便快速找到。

### 2. 在线查询处理和检索

**步骤1：查询编码**

1. **BERT编码**：当您输入查询“机器学习的好处”时，查询被分割成多个单词，并用BERT模型编码成嵌入向量。
2. **残差计算**：对于每个查询嵌入向量，找到最近的质心Ct，并计算量化残差r = v - Ct。

**步骤2：候选生成**

1. **最近质心查找**：对于查询中的每个向量，找到最近的质心，并使用倒排列表识别接近这些质心的段落嵌入。
2. **解压缩**：解压缩识别出的段落嵌入，并计算它们与查询向量的余弦相似度。
3. **评分和最大化减少**：将分数按段落ID分组，并对同一段落的分数进行最大化减少。这类似于在拼图中找到最匹配的片段。

**步骤3：排序和返回结果**

1. **合并和排序**：将所有分数相加，并按得分对段落进行排序。选择得分最高的前k个段落进行进一步评分。
2. **最终评分**：加载每个段落的完整嵌入集，并对每个段落进行最终评分。
3. **返回结果**：根据得分返回最相关的论文。这类似于从书架上找到最相关的几本书，并递给您。

### 示例

想象一下您在图书馆寻找“机器学习的好处”相关的书籍。图书馆员（ColBERTv2）事先已经对所有书籍进行了详细分类和标注，并将每本书的主要内容进行了数字化处理和压缩。当您提出查询时，图书馆员会迅速浏览每本书的数字化内容，找到最匹配的片段，将这些片段组合评分，最终将最相关的几本书递给您。这一切发生得非常迅速，因为图书馆员事先已经做好了大量准备工作。


## DPR

[Dense Passage Retrieval for Open-Domain Question Answering](https://arxiv.org/pdf/2004.04906)

### 示例场景

假设用户向系统提出了一个问题：“什么是光合作用？”我们将通过以下步骤使用 DPR 检索相关信息：

### 步骤 1: 查询编码

- **输入**：用户的问题 "什么是光合作用？"
- **处理**：首先，这个问题被送入一个预训练的 Transformer 模型（如BERT）。这个模型将文本转换成一个高维向量（通常是 768 维或更多，依赖于模型架构）。
- **输出**：问题的密集向量表示。

### 步骤 2: 文档库编码

- **预处理**：在这一步骤之前，系统已经预先将可能的回答或信息源（如维基百科条目、教科书段落等）编码成向量，并存储在向量数据库中。
- **数据库**：包含了大量文档的向量表示，这些都是事先处理好的。

### 步骤 3: 向量相似度计算

- **比较**：系统现在将查询向量与文档库中的每一个文档向量进行比较。比较通常采用余弦相似度
- **排名**：基于相似度得分，所有文档按得分从高到低排序。

### 步骤 4: 选择顶部文档

- **选择**：系统通常选择相似度得分最高的前 N 个文档（例如，前 5 或 10 个），认为这些文档与查询最相关。
- **输出**：这些顶部文档的文本内容被送到生成模型，用于下一步的答案生成。

### 步骤 5: 答案生成

- **生成模型输入**：选定的文档内容作为上下文输入到一个生成模型（如 GPT）中。
- **生成答案**：生成模型综合考虑这些文本信息，生成一个信息丰富且相关的答案。

### 步骤 6: 输出最终答案

- **用户接收**：系统输出的答案展示给用户，例如："光合作用是植物、藻类和某些细菌使用阳光将水和二氧化碳转化为氧气和葡萄糖的过程。"

这个例子展示了 DPR 在 RAG 系统中如何精确地从大量信息中检索相关内容，并辅助生成模型以提供准确且有用的回答。

[Tabular Embedding Model (TEM): Finetuning Embedding Models For Tabular RAG Applications](https://arxiv.org/abs/2405.01585)

> No code

## RAFT 

[RAFT: Adapting Language Model to Domain Specific RAG](https://arxiv.org/abs/2403.10131)

本文提出了一种称为**Retrieval Augmented Fine Tuning (RAFT)** 的方法，旨在增强预训练语言模型在特定领域中的检索增强生成（RAG）能力，特别是在“开放书本”设置下。该方法通过将微调与RAG结合，以提升模型在领域特定问答任务中的表现。

**数据准备**：RAFT方法为每个问题准备了一组文档，其中包含包含答案的“oracle”文档和不相关的干扰文档。对于包含正确文档的问题，生成链式思维（Chain-of-Thought, CoT）风格的答案，答案中直接引用了文档的相关片段，以减少生成过程中的幻觉问题（hallucination）。这种数据结构旨在训练模型更好地识别和利用相关信息。

**训练策略**：在训练过程中，模型被微调以应对包含干扰文档的情境。模型被迫在这些干扰文档的干扰下，准确提取有用的信息并生成答案。此外，训练数据中部分问题仅包含干扰文档，以促使模型依赖已学得的领域知识进行回答。这种策略不仅强化了模型在特定领域内的知识，还提高了其在有噪声背景下作答的能力。

**微调与RAG的结合**：RAFT通过微调模型，使其在开放书本的设置中更为有效地工作。在此过程中，模型学会了在处理特定领域的文档时，如何忽略无关信息并准确引用相关文档内容来生成答案。与传统的RAG方法不同，RAFT专注于特定领域的应用，进一步提高了模型的检索和生成能力。

实验结果表明，RAFT在多个数据集（如PubMed、HotpotQA、Gorilla API Bench）上显著优于其他基线模型，证明了其在领域特定问答任务中的强大潜力。本文为实现高效的领域特定问答任务提供了一种有效的训练策略，展示了微调与RAG相结合在提升模型性能方面的优势。

## Reference

1. Lu, W., Zhang, J., Zhang, J. and Chen, Y., 2024. Large language model for table processing: A survey. arXiv preprint arXiv:2402.05121.
2. Fang, X., Xu, W., Tan, F.A., Zhang, J., Hu, Z., Qi, Y., Nickleach, S., Socolinsky, D., Sengamedu, S. and Faloutsos, C., 2024. Large Language Models on Tabular Data--A Survey. arXiv preprint arXiv:2402.17944.
3. Zhao, Y., Long, Y., Liu, H., Nan, L., Chen, L., Kamoi, R., Liu, Y., Tang, X., Zhang, R. and Cohan, A., 2023. Docmath-eval: Evaluating numerical reasoning capabilities of llms in understanding long documents with tabular data. arXiv preprint arXiv:2311.09805.
4. Sui, Y., Zou, J., Zhou, M., He, X., Du, L., Han, S. and Zhang, D., 2023. Tap4llm: Table provider on sampling, augmenting, and packing semi-structured data for large language model reasoning. arXiv preprint arXiv:2312.09039.
5. Dong, X., Zhang, C., Ge, Y., Mao, Y., Gao, Y., Lin, J. and Lou, D., 2023. C3: Zero-shot text-to-sql with chatgpt. arXiv preprint arXiv:2307.07306.
6. Sundar, A.S. and Heck, L., 2023. cTBLS: Augmenting large language models with conversational tables. arXiv preprint arXiv:2303.12024.
7. Gao, D., Wang, H., Li, Y., Sun, X., Qian, Y., Ding, B. and Zhou, J., 2023. Text-to-sql empowered by large language models: A benchmark evaluation. arXiv preprint arXiv:2308.15363.
8. Lin, W., Blloshmi, R., Byrne, B., de Gispert, A. and Iglesias, G., 2023, July. LI-RAGE: Late Interaction Retrieval Augmented Generation with Explicit Signals for Open-Domain Table Question Answering. In Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers) (pp. 1557-1566).
9. Khattab, O. and Zaharia, M., 2020, July. Colbert: Efficient and effective passage search via contextualized late interaction over bert. In Proceedings of the 43rd International ACM SIGIR conference on research and development in Information Retrieval (pp. 39-48).
10. Santhanam, K., Khattab, O., Saad-Falcon, J., Potts, C. and Zaharia, M., 2021. Colbertv2: Effective and efficient retrieval via lightweight late interaction. arXiv preprint arXiv:2112.01488.
11. Karpukhin, V., Oğuz, B., Min, S., Lewis, P., Wu, L., Edunov, S., Chen, D. and Yih, W.T., 2020. Dense passage retrieval for open-domain question answering. arXiv preprint arXiv:2004.04906.
12. Khanna, S. and Subedi, S., 2024. Tabular Embedding Model (TEM): Finetuning Embedding Models For Tabular RAG Applications. arXiv preprint arXiv:2405.01585.
13. Zhang, T., Patil, S.G., Jain, N., Shen, S., Zaharia, M., Stoica, I. and Gonzalez, J.E., 2024. Raft: Adapting language model to domain specific rag. arXiv preprint arXiv:2403.10131.